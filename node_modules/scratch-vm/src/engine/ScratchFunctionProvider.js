const {FunctionProvider, Thread} = require("../blockly");
const funcList = require("../online");

class ScratchFunctionProvider extends FunctionProvider
{
	constructor(runtime){
		super();
		this.runtime = runtime;
		for(var key in funcList){
			this.register(funcList[key], key);
		}
	}

	onCallUnregisteredFunction(name, argList, retCount){
		const {runtime} = this;
		const thread = Thread.Current;
		const util = {
			target: thread.userData.target,
			ioQuery: function (device, func, args) {
				// Find the I/O device and execute the query/function call.
				if (runtime.ioDevices[device] && runtime.ioDevices[device][func]) {
					const devObject = runtime.ioDevices[device];
					return devObject[func].apply(devObject, args);
				}
			}
		};
		
		var handler = runtime.getOpcodeFunction(name);
		FunctionProvider.CallFunction(thread, handler, [argList, util], retCount > 0);
		//console.log("interpreter invoke method:", name, argList, retCount);
	}
}

module.exports = ScratchFunctionProvider;