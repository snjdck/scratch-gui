
const Thread = require("../runtime/Thread");

class FunctionProviderHelper
{
	static InitMath(provider)
	{
		provider.register("+", (a, b) => a + b);
		provider.register("-", (a, b) => a - b);
		provider.register("*", (a, b) => a * b);
		provider.register("/", (a, b) => a / b);
		provider.register("%", (a, b) => a % b);
		
		provider.register("!", a => !a);
		provider.register("&&", (a, b) => a && b);
		provider.register("||", (a, b) => a || b);
		
		provider.register("<" , (a, b) => a <  b);
		provider.register("<=", (a, b) => a <= b);
		provider.register(">" , (a, b) => a >  b);
		provider.register(">=", (a, b) => a >= b);
		provider.register("==", (a, b) => a == b);
		provider.register("!=", (a, b) => a != b);
		
		provider.register("sleep", seconds => {
			const timeout = performence.now() + seconds * 1000;
			return new Promise(resolve => {
				Thread.Current.suspendUpdater = () => {
					if(performence.now() >= timeout){
						resolve();
					}
				};
			});
		});
		provider.register("getProp", (target, key) => target[key]);
		provider.register("setProp", (target, key, value) => target[key] = value);
	}
}

module.exports = FunctionProviderHelper;