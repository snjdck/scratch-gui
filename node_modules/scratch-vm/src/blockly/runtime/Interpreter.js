const Thread = require("./Thread");
const InstructionExector = require("./InstructionExector");
const VirtualMachine = require("./VirtualMachine");
const JsonCodeToAssembly = require("./JsonCodeToAssembly");
const ConditionCalculater = require("./ConditionCalculater");
const AssemblyOptimizer = require("./AssemblyOptimizer");
const FunctionCallOptimizer = require("./FunctionCallOptimizer");
const DeadCodeCleaner = require("./DeadCodeCleaner");
const CodeListPrinter = require("./CodeListPrinter");

class Interpreter
{
	constructor(functionProvider){
		this.instructionExector = new InstructionExector(functionProvider);
		this.virtualMachine = new VirtualMachine(this.instructionExector);

		this.__onEnterFrame = this.__onEnterFrame.bind(this);
		requestAnimationFrame(this.__onEnterFrame);
	}
	
	__onEnterFrame(timeElapsed){
		if(this.virtualMachine.getThreadCount() > 0){
			this.virtualMachine.onTick();
		}
		requestAnimationFrame(this.__onEnterFrame);
	}
	
	compile(blockList){
		var codeList = JsonCodeToAssembly.translate(blockList);
		FunctionCallOptimizer.optimize(codeList);
		ConditionCalculater.calculate(codeList);
		AssemblyOptimizer.optimize(codeList);
		DeadCodeCleaner.clean(codeList);
		console.log(this.castCodeListToString(codeList));
		return codeList;
	}
	
	execute(blockList, globalContext=null){
		return this.executeAssembly(this.compile(blockList), globalContext);
	}
	
	executeAssembly(codeList, globalContext=null){
		var thread = new Thread(this.virtualMachine, codeList, globalContext);
		this.virtualMachine.startThread(thread);
		return thread;
	}
	
	executeAssemblySynchronously(codeList){
		var thread = new Thread(this.virtualMachine, codeList, null);
		this.virtualMachine.execute(thread);
		return thread.context;
	}
	
	executeSynchronously(blockList){
		return this.executeAssemblySynchronously(this.compile(blockList));
	}
	
	stopAllThreads(){
		this.virtualMachine.stopAllThreads();
	}
	
	getCopyOfThreadList(){
		return this.virtualMachine.getCopyOfThreadList();
	}
	
	getThreadCount(){
		return this.virtualMachine.getThreadCount();
	}
	
	castCodeListToString(codeList){
		return CodeListPrinter.castCodeListToString(codeList);
	}
}

module.exports = Interpreter;