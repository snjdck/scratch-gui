class ScriptContext
{
	constructor(parent=null){
		this.parent = parent;
		this.dataDict = {};
	}
	
	getValue(key){
		if(this.hasKey(key, false)){
			return this.dataDict[key];
		}
		if(this.parent){
			return this.parent.getValue(key);
		}
		console.warn("warning:property:'" + key + "' has not defined!");
	}
	
	setValue(key, value){
		if(this.hasKey(key, false)){
			this.dataDict[key] = value;
		}else if(this.hasKey(key, true)){
			this.parent.setValue(key, value);
		}else{
			throw new Error("has no key:" + key);
		}
	}
	
	hasKey(key, searchParent){
		if(this.dataDict.hasOwnProperty(key)){
			return true;
		}
		if(searchParent && this.parent){
			return this.parent.hasKey(key, true);
		}
		return false;
	}
	
	newKey(key, value){
		this.dataDict[key] = value;
	}
	
	delKey(key){
		delete this.dataDict[key];
	}
	
	createChild(){
		return new ScriptContext(this);
	}
}

module.exports = ScriptContext;