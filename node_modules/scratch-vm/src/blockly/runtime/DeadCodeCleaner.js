const OpCode = require("../OpCode");

const codeUsage = [];

function clean(codeList)
{
	initCodeUsage(codeList);
	calcCodeUsage(codeList, 0);
	markJump1Codes(codeList);
	adjustJumpCode(codeList);
	removeDeadCode(codeList);
}

function initCodeUsage(codeList)
{
	for(var i=codeList.length-1; i>=0; --i){
		codeUsage[i] = false;
	}
}

function calcCodeUsage(codeList, fromIndex)
{
	var index = fromIndex;
	var totalCount = codeList.length;
	while(index < totalCount){
		if(codeUsage[index]){
			return;
		}
		codeUsage[index] = true;
		var code = codeList[index];
		switch(code[0]){
			case OpCode.NEW_FUNCTION:
			case OpCode.JUMP_IF_FALSE:
			case OpCode.JUMP_IF_NOT_POSITIVE:
				calcCodeUsage(codeList, index+1);
				//fallthrough
			case OpCode.JUMP:
				index += code[1];
				break;
			case OpCode.RETURN:
				return;
			default:
				++index;
		}
	}
}

function markJump1Codes(codeList)
{
	loop:
	for(var i=codeList.length-1; i>=0; --i){
		if(!codeUsage[i]){
			continue;
		}
		var code = codeList[i];
		if(code[0] != OpCode.JUMP || code[1] <= 0){
			continue;
		}
		var jumpIndex = i + code[1];
		while(i < --jumpIndex){
			if(codeUsage[jumpIndex]){
				continue loop;
			}
		}
		codeUsage[i] = false;
	}
}

function removeDeadCode(codeList)
{
	var isInDeadCode = false;
	var index;
	for(var i=codeList.length-1; i>=0; --i){
		if(codeUsage[i] != isInDeadCode){
			continue;
		}
		isInDeadCode = !isInDeadCode;
		if(isInDeadCode){
			index = i;
		}else{
			codeList.splice(i+1, index - i);
		}
	}
	if(isInDeadCode){
		codeList.splice(0, index + 1);
	}
}

function adjustJumpCode(codeList)
{
	for(var i=codeList.length-1; i>=0; --i){
		if(!codeUsage[i]){
			continue;
		}
		var code = codeList[i];
		switch(code[0]){
			case OpCode.JUMP:
			case OpCode.JUMP_IF_FALSE:
			case OpCode.JUMP_IF_NOT_POSITIVE:
			case OpCode.NEW_FUNCTION:
				break;
			default:
				continue;
		}
		var jumpCount = code[1];
		if(jumpCount > 0){
			code[1] -= calcSpace(i, i+jumpCount);
		}else if(jumpCount < 0){
			code[1] += calcSpace(i+jumpCount, i);
		}
	}
}

function calcSpace(fromIndex, toIndex)
{
	var result = 0;
	for(var i=fromIndex+1; i<toIndex; ++i){
		if(!codeUsage[i]){
			++result;
		}
	}
	return result;
}

exports.clean = clean;