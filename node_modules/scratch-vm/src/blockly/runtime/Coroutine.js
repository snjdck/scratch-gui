const FunctionScope = require("./FunctionScope");

class Coroutine extends FunctionScope
{	
	constructor(funcRef){
		super(funcRef);
		this.yieldFrom = null;
	}
	
	get innermost(){
		var scope = this;
		while(scope.yieldFrom != null)
			scope = scope.yieldFrom;
		return scope;
	}
	
	removeInnermost(){
		var scope = this;
		while(scope.yieldFrom.yieldFrom != null)
			scope = scope.yieldFrom;
		scope.yieldFrom = null;
	}
	
	isFinish(){
		return this.resumeAddress >= this.finishAddress;
	}
	
	onYield(thread){
		this.innermost.resumeAddress = thread.ip;
		this.doReturn(thread);
	}
	
	onReturn(thread){
		this.innermost.resumeAddress = this.finishAddress;
		this.innermost.doReturn(thread);
		if(this.yieldFrom != null){
			thread.pushScope(this);
			this.removeInnermost();
		}
	}
}

module.exports = Coroutine;