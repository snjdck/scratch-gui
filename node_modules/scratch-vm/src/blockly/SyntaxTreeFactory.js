const OpCode = require("./OpCode");

class SyntaxTreeFactory
{
	static NewString(value){
		return {"type":"string", value};
	}
	
	static NewNumber(value){
		return {"type":"number", value};
	}
	
	static Break(){
		return {"type":"break"};
	}
	
	static Continue(){
		return {"type":"continue"};
	}
	
	static Return(){
		return {"type":"return"};
	}
	
	static NewVar(name, value){
		return {"type":OpCode.NEW_VAR, name, value};
	}
	
	static GetVar(name){
		return {"type":OpCode.GET_VAR, name};
	}
	
	static SetVar(name, value){
		return {"type":OpCode.SET_VAR, name, value};
	}
	
	static NewInvoke(target, argList, retCount){
		return {"type":"invoke", target, argList, retCount};
	}
	
	static Call(method, argList, retCount){
		return {"type":"function", method, argList, retCount};
	}
	
	static NewExpression(name, argList){
		return SyntaxTreeFactory.Call(name, argList, 1);
	}
	
	static NewStatement(name, argList){
		return SyntaxTreeFactory.Call(name, argList, 0);
	}
	
	static NewLoop(count, code){
		return {"type":"loop", count, code};
	}
	
	static NewWhile(condition, code){
		return {"type":"while", condition, code};
	}
	
	static NewUntil(condition, code){
		return {"type":"until", condition, code};
	}
	
	static NewFor(init, condition, iter, code){
		return {"type":"for", init, condition, iter, code};
	}
	
	static NewUnless(condition, code){
		return {"type":"unless", condition, code};
	}
	
	static NewIf(condition, code){
		return {"type":"if", condition, code};
	}
	
	static NewElseIf(condition, code){
		return {"type":"else if", condition, code};
	}
	
	static NewElse(code){
		return {"type":"else", code};
	}
	
	static NewFunction(argNameList, code, userData=null){
		return {"type":OpCode.NEW_FUNCTION, "argList":argNameList, userData, code};
	}
}

module.exports = SyntaxTreeFactory;