const Cast = require('../util/cast');

function data_variable({VARIABLE}){
	const {runtime, target} = this.userData;
	return target.lookupOrCreateVariable(VARIABLE).value;
}

function data_setvariableto({VARIABLE, VALUE}){
	const {runtime, target} = this.userData;
	target.lookupOrCreateVariable(VARIABLE).value = VALUE;
}

function data_changevariableby({VARIABLE, VALUE}){
	const {runtime, target} = this.userData;
	const ref = target.lookupOrCreateVariable(VARIABLE);
	ref.value = Cast.toNumber(ref.value) + Cast.toNumber(VALUE);
}

function data_listcontents({LIST}){
	const {runtime, target} = this.userData;
	var list = target.lookupOrCreateList(LIST).contents;
	var joinKey = list.every(v => (typeof v == "string") && (v.length == 1)) ? "" : " ";
	return list.join(joinKey);
}

function data_addtolist({LIST, ITEM}){
	const {runtime, target} = this.userData;
	var list = target.lookupOrCreateList(LIST).contents;
	list.push(ITEM);
}

function data_deleteoflist({LIST, INDEX}){
	const {runtime, target} = this.userData;
	var list = target.lookupOrCreateList(LIST).contents;
	const index = Cast.toListIndex(INDEX, list.length);
	if(index === Cast.LIST_INVALID)
		return;
	if(index === Cast.LIST_ALL)
		list.splice(0);
	else
		list.splice(index - 1, 1);
}

function data_insertatlist({LIST, INDEX, ITEM}){
	const {runtime, target} = this.userData;
	var list = target.lookupOrCreateList(LIST).contents;
	const index = Cast.toListIndex(INDEX, list.length + 1);
	if(index === Cast.LIST_INVALID)
		return;
	list.splice(index - 1, 0, ITEM);
}

function data_replaceitemoflist({LIST, INDEX, ITEM}){
	const {runtime, target} = this.userData;
	var list = target.lookupOrCreateList(LIST).contents;
	const index = Cast.toListIndex(INDEX, list.length);
	if(index === Cast.LIST_INVALID)
		return;
	list.splice(index - 1, 1, ITEM);
}

function data_itemoflist({LIST, INDEX}){
	const {runtime, target} = this.userData;
	var list = target.lookupOrCreateList(LIST).contents;
	const index = Cast.toListIndex(INDEX, list.length);
	if(index === Cast.LIST_INVALID)
		return "";
	return list[index - 1];
}

function data_lengthoflist({LIST}){
	const {runtime, target} = this.userData;
	var list = target.lookupOrCreateList(LIST).contents;
	return list.length;
}

function data_listcontainsitem({LIST, ITEM}){
	const {runtime, target} = this.userData;
	var list = target.lookupOrCreateList(LIST).contents;
	if(list.indexOf(ITEM) >= 0)
		return true;
	return list.some(v => Cast.compare(v, ITEM) == 0);
}

module.exports = {
	data_variable,
	data_setvariableto,
	data_changevariableby,
	data_listcontents,
	data_addtolist,
	data_deleteoflist,
	data_insertatlist,
	data_replaceitemoflist,
	data_itemoflist,
	data_lengthoflist,
	data_listcontainsitem
};