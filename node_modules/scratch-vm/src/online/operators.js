const Cast = require('../util/cast.js');
const MathUtil = require('../util/math-util.js');

function operator_add({NUM1, NUM2}){
	return Cast.toNumber(NUM1) + Cast.toNumber(NUM2);
}

function operator_subtract({NUM1, NUM2}){
	return Cast.toNumber(NUM1) - Cast.toNumber(NUM2);
}

function operator_multiply({NUM1, NUM2}){
	return Cast.toNumber(NUM1) * Cast.toNumber(NUM2);
}

function operator_divide({NUM1, NUM2}){
	return Cast.toNumber(NUM1) / Cast.toNumber(NUM2);
}

function operator_lt({OPERAND1, OPERAND2}){
	return Cast.compare(OPERAND1, OPERAND2) < 0;
}

function operator_equals({OPERAND1, OPERAND2}){
	return Cast.compare(OPERAND1, OPERAND2) === 0;
}

function operator_gt({OPERAND1, OPERAND2}){
	return Cast.compare(OPERAND1, OPERAND2) > 0;
}

function operator_and({OPERAND1, OPERAND2}){
	return Cast.toBoolean(OPERAND1) && Cast.toBoolean(OPERAND2);
}

function operator_or({OPERAND1, OPERAND2}){
	return Cast.toBoolean(OPERAND1) || Cast.toBoolean(OPERAND2);
}

function operator_not({OPERAND}){
	return !Cast.toBoolean(OPERAND);
}

function operator_random({FROM, TO}){
	const nFrom = Cast.toNumber(FROM);
	const nTo = Cast.toNumber(TO);
	const low = nFrom <= nTo ? nFrom : nTo;
	const high = nFrom <= nTo ? nTo : nFrom;
	if(low === high)
		return low;
	// If both arguments are ints, truncate the result to an int.
	if(Cast.isInt(FROM) && Cast.isInt(TO)){
		return low + Math.floor(Math.random() * ((high + 1) - low));
	}
	return Math.random() * (high - low) + low;
}

function operator_join({STRING1, STRING2}){
	return Cast.toString(STRING1) + Cast.toString(STRING2);
}

function operator_letter_of({LETTER, STRING}){
	const index = Cast.toNumber(LETTER) - 1;
	const str = Cast.toString(STRING);
	// Out of bounds?
	if(index < 0 || index >= str.length){
		return '';
	}
	return str.charAt(index);
}

function operator_length({STRING}){
	return Cast.toString(STRING).length;
}

function operator_contains({STRING1, STRING2}){
	STRING1 = Cast.toString(STRING1).toLowerCase();
	STRING2 = Cast.toString(STRING2).toLowerCase();
	return STRING1.includes(STRING2);
}

function operator_mod({NUM1, NUM2}){
	const n = Cast.toNumber(NUM1);
	const modulus = Cast.toNumber(NUM2);
	let result = n % modulus;
	// Scratch mod is kept positive.
	if(result / modulus < 0)
		result += modulus;
	return result;
}

function operator_round({NUM}){
	return Math.round(Cast.toNumber(NUM));
}

function operator_mathop({OPERATOR, NUM}){
	const n = Cast.toNumber(NUM);
	switch(Cast.toString(OPERATOR).toLowerCase()){
	case 'abs': return Math.abs(n);
	case 'floor': return Math.floor(n);
	case 'ceiling': return Math.ceil(n);
	case 'sqrt': return Math.sqrt(n);
	case 'sin': return parseFloat(Math.sin((Math.PI * n) / 180).toFixed(10));
	case 'cos': return parseFloat(Math.cos((Math.PI * n) / 180).toFixed(10));
	case 'tan': return MathUtil.tan(n);
	case 'asin': return (Math.asin(n) * 180) / Math.PI;
	case 'acos': return (Math.acos(n) * 180) / Math.PI;
	case 'atan': return (Math.atan(n) * 180) / Math.PI;
	case 'ln': return Math.log(n);
	case 'log': return Math.log(n) / Math.LN10;
	case 'e ^': return Math.exp(n);
	case '10 ^': return Math.pow(10, n);
	}
	return 0;
}

module.exports = {
	operator_add,
	operator_subtract,
	operator_multiply,
	operator_divide,
	operator_lt,
	operator_equals,
	operator_gt,
	operator_and,
	operator_or,
	operator_not,
	operator_random,
	operator_join,
	operator_letter_of,
	operator_length,
	operator_contains,
	operator_mod,
	operator_round,
	operator_mathop
};